// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package messaging is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Chunk
	UploadStatus
*/
package messaging

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}
var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Chunk struct {
	Content []byte `protobuf:"bytes,1,opt,name=Content,json=content,proto3" json:"Content,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type UploadStatus struct {
	Message string           `protobuf:"bytes,1,opt,name=Message,json=message" json:"Message,omitempty"`
	Code    UploadStatusCode `protobuf:"varint,2,opt,name=Code,json=code,enum=messaging.UploadStatusCode" json:"Code,omitempty"`
}

func (m *UploadStatus) Reset()                    { *m = UploadStatus{} }
func (m *UploadStatus) String() string            { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()               {}
func (*UploadStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterType((*Chunk)(nil), "messaging.Chunk")
	proto.RegisterType((*UploadStatus)(nil), "messaging.UploadStatus")
	proto.RegisterEnum("messaging.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GuploadService service

type GuploadServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (GuploadService_UploadClient, error)
}

type guploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuploadServiceClient(cc *grpc.ClientConn) GuploadServiceClient {
	return &guploadServiceClient{cc}
}

func (c *guploadServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (GuploadService_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuploadService_serviceDesc.Streams[0], c.cc, "/messaging.GuploadService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &guploadServiceUploadClient{stream}
	return x, nil
}

type GuploadService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type guploadServiceUploadClient struct {
	grpc.ClientStream
}

func (x *guploadServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *guploadServiceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GuploadService service

type GuploadServiceServer interface {
	Upload(GuploadService_UploadServer) error
}

func RegisterGuploadServiceServer(s *grpc.Server, srv GuploadServiceServer) {
	s.RegisterService(&_GuploadService_serviceDesc, srv)
}

func _GuploadService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GuploadServiceServer).Upload(&guploadServiceUploadServer{stream})
}

type GuploadService_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type guploadServiceUploadServer struct {
	grpc.ServerStream
}

func (x *guploadServiceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *guploadServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GuploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.GuploadService",
	HandlerType: (*GuploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _GuploadService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0x4d, 0x2d, 0x2e, 0x4e,
	0x4c, 0xcf, 0xcc, 0x4b, 0x57, 0x52, 0xe4, 0x62, 0x75, 0xce, 0x28, 0xcd, 0xcb, 0x16, 0x92, 0xe0,
	0x62, 0x77, 0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x62,
	0x4f, 0x86, 0x70, 0x95, 0x22, 0xb9, 0x78, 0x42, 0x0b, 0x72, 0xf2, 0x13, 0x53, 0x82, 0x4b, 0x12,
	0x4b, 0x4a, 0x8b, 0x41, 0x2a, 0x7d, 0xc1, 0xfa, 0x53, 0xc1, 0x2a, 0x39, 0x83, 0xd8, 0x21, 0xc6,
	0xa5, 0x0a, 0xe9, 0x73, 0xb1, 0x38, 0xe7, 0xa7, 0xa4, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0xf0, 0x19,
	0x49, 0xeb, 0xc1, 0xad, 0xd1, 0x43, 0x36, 0x00, 0xa4, 0x24, 0x88, 0x25, 0x39, 0x3f, 0x25, 0x55,
	0xcb, 0x98, 0x4b, 0x00, 0x5d, 0x46, 0x88, 0x9b, 0x8b, 0x3d, 0x34, 0x2f, 0x3b, 0x2f, 0xbf, 0x3c,
	0x4f, 0x80, 0x41, 0x88, 0x8d, 0x8b, 0xc9, 0x3f, 0x5b, 0x80, 0x51, 0x88, 0x8b, 0x8b, 0xcd, 0x2d,
	0x31, 0x33, 0x27, 0x35, 0x45, 0x80, 0xc9, 0xc8, 0x93, 0x8b, 0xcf, 0xbd, 0x14, 0xa2, 0x0b, 0xe2,
	0x2b, 0x21, 0x73, 0x2e, 0x36, 0x88, 0x31, 0x42, 0x02, 0x48, 0x76, 0x82, 0xfd, 0x25, 0x25, 0x8e,
	0xc3, 0x15, 0x4a, 0x0c, 0x1a, 0x8c, 0x49, 0x6c, 0xe0, 0xf0, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x3d, 0x4b, 0x62, 0x1a, 0x20, 0x01, 0x00, 0x00,
}
